{"version":3,"sources":["services/RequestFactory.js","components/App/Layout/AppLayout.module.scss","services/Request.js","components/App/Layout/AppLayout.js","App.js","serviceWorker.js","store/reducers/collection.js","services/Client/LocalStorage.js","services/Request/GetCollectionRequest.js","services/Request/SaveCollectionRequest.js","store/collection.js","store/actions/collection.js","index.js"],"names":["RequestFactory","client","request","params","arguments","length","undefined","this","initClient","getClient","send","getUrl","getMethod","module","exports","layout","GET_METHOD","POST_METHOD","DELETE_METHOD","Request","url","method","Object","_Volumes_Projects_base_frontend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","AppLayout","props","react_default","a","createElement","className","classes","children","NasaCollectionList","lazy","Promise","all","__webpack_require__","e","then","bind","NasaCollectionSearch","App","Layout_AppLayout","react_router_dom","react","fallback","react_router","path","exact","component","render","Component","Boolean","window","location","hostname","match","initialState","collection","state","action","type","toConsumableArray","items","concat","item","map","data","nasa_id","filter","id","isFavorite","LocalStorage","get","post","delete","sessionStorage","getItem","ex","setItem","removeItem","GetCollectionRequest","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","LocalStorageCollectionRequest","collectionStore","createStore","CollectionReducers","dispatch","factory","result","JSON","parse","fetchCollection","subscribe","SaveCollectionRequest","stringify","saveCollection","getState","ReactDOM","es","store","CollectionStore","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.410f9660.chunk.js","sourcesContent":["export default class RequestFactory {\n    initClient(client) {\n        return new client();\n    }\n\n    send(request, params = {}) {\n        const client = this.initClient(request.getClient());\n\n        return client.send(request.getUrl(), params, request.getMethod());\n    }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"AppLayout_layout__3l492\"};","export const GET_METHOD = 'get';\nexport const POST_METHOD = 'post';\nexport const DELETE_METHOD = 'delete';\n\nexport default class Request {\n    constructor(url, method = GET_METHOD, client) {\n        this.url = url;\n        this.method = method;\n        this.client = client;\n    }\n\n    getUrl() {\n        return this.url;\n    }\n\n    getMethod() {\n        return this.method;\n    }\n\n    getClient() {\n        return this.client;\n    }\n}\n","import React from 'react';\nimport classes from './AppLayout.module.scss';\n\nconst AppLayout = (props) => (\n    <div className={classes.layout}>\n        <main>\n            {props.children}\n        </main>\n    </div>\n);\n\nexport default AppLayout;\n","import React, {Component, lazy, Suspense} from 'react';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport AppLayout from \"src/components/App/Layout/AppLayout\";\n\nconst NasaCollectionList = lazy(() => import(\"./views/NasaCollection/List/NasaCollectionList\"));\nconst NasaCollectionSearch = lazy(() => import(\"./views/NasaCollection/Search/NasaCollectionSearch\"));\n\nclass App extends Component {\n    render() {\n        return (\n            <AppLayout>\n                <BrowserRouter>\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <Switch>\n                            <Route path={'/'} exact component={NasaCollectionList}/>\n                            <Route path={'/search'} exact component={NasaCollectionSearch}/>\n                            <Route render={() => (<h1>PAGE NOT FOUND</h1>)}/>\n                        </Switch>\n                    </Suspense>\n                </BrowserRouter>\n            </AppLayout>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","const initialState = [];\n\nconst collection = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_ITEM':\n            return [\n                ...action.items,\n            ];\n        case 'ADD_ITEM':\n            return [\n                ...state,\n                action.item,\n            ];\n        case 'EDIT_ITEM':\n            return state.map(item => {\n                if (item.data[0].nasa_id === action.item.data[0].nasa_id) {\n                    return action.item;\n                }\n                return item;\n            });\n        case 'DELETE_ITEM':\n            return state.filter(item => item.data[0].nasa_id !== action.id);\n        case 'TOGGLE_FAVORITE':\n            return state.map(item => {\n                if (item.data[0].nasa_id === action.id) {\n                    item.isFavorite = !item.isFavorite;\n                }\n                return item;\n            });\n        case 'UNSET_FAVORITE':\n            return state.map(item => {\n                if (item.data[0].nasa_id === action.id) {\n                    item.isFavorite = false;\n                }\n                return item;\n            });\n        default:\n            return state;\n    }\n};\n\nexport default collection;\n","import {GET_METHOD, POST_METHOD, DELETE_METHOD} from \"src/services/Request\";\n\nexport default class LocalStorage {\n    send(request, params = {}, method = GET_METHOD) {\n        switch (method) {\n            case GET_METHOD:\n                return this.get(request, params);\n            case POST_METHOD:\n                return this.post(request, params);\n            case DELETE_METHOD:\n                return this.delete(request, params);\n            default:\n                return new Promise(() => {\n                });\n        }\n    }\n\n    /**\n     *\n     * @param request\n     * @param params\n     * @returns {*}\n     */\n    get(request, params = {}) {\n        try {\n            return window.sessionStorage.getItem(request);\n        } catch (ex) {\n            return null;\n        }\n    }\n\n    post(request, params = {}) {\n        try {\n            window.sessionStorage.setItem(request, params);\n        } catch (ex) {\n            return null;\n        }\n    }\n\n    delete(request) {\n        try {\n            window.sessionStorage.removeItem(request);\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\n","import LocalStorage from \"src/services/Client/LocalStorage\";\nimport Request, {GET_METHOD} from \"src/services/Request\";\n\nexport default class GetCollectionRequest extends Request {\n    constructor() {\n        super('NasaCollection', GET_METHOD, LocalStorage);\n    }\n}\n","import LocalStorage from \"src/services/Client/LocalStorage\";\nimport Request, {POST_METHOD} from \"src/services/Request\";\n\nexport default class LocalStorageCollectionRequest extends Request {\n    constructor() {\n        super('NasaCollection', POST_METHOD, LocalStorage);\n    }\n}\n","import {createStore} from 'redux';\nimport CollectionReducers from './reducers/collection';\nimport {fetchCollection, saveCollection} from './actions/collection';\n\nconst collectionStore = createStore(CollectionReducers);\n\ncollectionStore.dispatch(fetchCollection());\n\ncollectionStore.subscribe(() => {\n    saveCollection(collectionStore.getState());\n});\n\nexport default collectionStore;\n","import GetCollectionRequest from \"src/services/Request/GetCollectionRequest\";\nimport SaveCollectionRequest from \"src/services/Request/SaveCollectionRequest\";\nimport RequestFactory from \"src/services/RequestFactory\";\n\nexport const fetchCollection = () => {\n    const factory = new RequestFactory();\n    const request = new GetCollectionRequest();\n    let result = factory.send(request);\n    if (result) {\n        result = JSON.parse(result);\n    } else {\n        result = [];\n    }\n\n    return {\n        type: 'SET_ITEM',\n        items: result,\n    }\n};\n\nexport const saveCollection = (data) => {\n    const factory = new RequestFactory();\n    const request = new SaveCollectionRequest();\n    factory.send(request, JSON.stringify(data));\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport CollectionStore from 'src/store/collection';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <Provider store={CollectionStore}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}